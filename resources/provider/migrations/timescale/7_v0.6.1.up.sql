-- Autogenerated by migration tool on 2022-02-07 17:45:49
-- CHANGEME: Verify or edit this file before proceeding

-- Resource: cosmosdb.accounts
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_accounts" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"subscription_id" text,
	"provisioning_state" text,
	"document_endpoint" text,
	"database_account_offer_type" text,
	"ip_rules" text[],
	"is_virtual_network_filter_enabled" boolean,
	"enable_automatic_failover" boolean,
	"consistency_policy_default_consistency_level" text,
	"consistency_policy_max_staleness_prefix" bigint,
	"consistency_policy_max_interval_in_seconds" integer,
	"virtual_network_rules" jsonb,
	"enable_multiple_write_locations" boolean,
	"enable_cassandra_connector" boolean,
	"connector_offer" text,
	"disable_key_based_metadata_write_access" boolean,
	"key_vault_key_uri" text,
	"public_network_access" text,
	"enable_free_tier" boolean,
	"api_properties_server_version" text,
	"enable_analytical_storage" boolean,
	"id" text,
	"name" text,
	"type" text,
	"location" text,
	"tags" jsonb,
	CONSTRAINT azure_cosmosdb_accounts_pk PRIMARY KEY(cq_fetch_date,subscription_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('azure_cosmosdb_accounts');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_capabilities" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"name" text,
	CONSTRAINT azure_cosmosdb_account_capabilities_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_capabilities (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_capabilities', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_write_locations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"id" text,
	"location_name" text,
	"document_endpoint" text,
	"provisioning_state" text,
	"failover_priority" integer,
	"is_zone_redundant" boolean,
	CONSTRAINT azure_cosmosdb_account_write_locations_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_write_locations (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_write_locations', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_read_locations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"id" text,
	"location_name" text,
	"document_endpoint" text,
	"provisioning_state" text,
	"failover_priority" integer,
	"is_zone_redundant" boolean,
	CONSTRAINT azure_cosmosdb_account_read_locations_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_read_locations (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_read_locations', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_locations" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"id" text,
	"location_name" text,
	"document_endpoint" text,
	"provisioning_state" text,
	"failover_priority" integer,
	"is_zone_redundant" boolean,
	CONSTRAINT azure_cosmosdb_account_locations_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_locations (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_locations', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_failover_policies" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"id" text,
	"location_name" text,
	"failover_priority" integer,
	CONSTRAINT azure_cosmosdb_account_failover_policies_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_failover_policies (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_failover_policies', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_private_endpoint_connections" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"private_endpoint_id" text,
	"private_link_service_connection_state_status" text,
	"private_link_service_connection_state_actions_required" text,
	"private_link_service_connection_state_description" text,
	"group_id" text,
	"provisioning_state" text,
	"id" text,
	"name" text,
	"type" text,
	CONSTRAINT azure_cosmosdb_account_private_endpoint_connections_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_private_endpoint_connections (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_private_endpoint_connections', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_account_cors" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"account_cq_id" uuid,
	"allowed_origins" text,
	"allowed_methods" text,
	"allowed_headers" text,
	"exposed_headers" text,
	"max_age_in_seconds" bigint,
	CONSTRAINT azure_cosmosdb_account_cors_pk PRIMARY KEY(cq_fetch_date,cq_id),
	UNIQUE(cq_fetch_date,cq_id)
);
CREATE INDEX ON azure_cosmosdb_account_cors (cq_fetch_date, account_cq_id);
SELECT setup_tsdb_child('azure_cosmosdb_account_cors', 'account_cq_id', 'azure_cosmosdb_accounts', 'cq_id');

-- Resource: cosmosdb.mongodb_databases
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_mongodb_databases" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"subscription_id" text,
	"database_id" text,
	"database_rid" text,
	"database_ts" float,
	"database_etag" text,
	"throughput" integer,
	"autoscale_settings_max_throughput" integer,
	"id" text,
	"name" text,
	"type" text,
	"location" text,
	"tags" jsonb,
	CONSTRAINT azure_cosmosdb_mongodb_databases_pk PRIMARY KEY(cq_fetch_date,subscription_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('azure_cosmosdb_mongodb_databases');

-- Resource: cosmosdb.sql_databases
CREATE TABLE IF NOT EXISTS "azure_cosmosdb_sql_databases" (
	"cq_id" uuid NOT NULL,
	"cq_meta" jsonb,
	"cq_fetch_date" timestamp without time zone NOT NULL,
	"subscription_id" text,
	"database_id" text,
	"database_rid" text,
	"database_ts" float,
	"database_etag" text,
	"database_colls" text,
	"database_users" text,
	"sql_database_get_properties_throughput" integer,
	"autoscale_settings_max_throughput" integer,
	"id" text,
	"name" text,
	"type" text,
	"location" text,
	"tags" jsonb,
	CONSTRAINT azure_cosmosdb_sql_databases_pk PRIMARY KEY(cq_fetch_date,subscription_id,id),
	UNIQUE(cq_fetch_date,cq_id)
);
SELECT setup_tsdb_parent('azure_cosmosdb_sql_databases');
