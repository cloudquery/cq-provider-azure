// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: TenantsClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscription "github.com/Azure/azure-sdk-for-go/services/subscription/mgmt/2020-09-01/subscription"
	gomock "github.com/golang/mock/gomock"
)

// MockTenantsClient is a mock of TenantsClient interface.
type MockTenantsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTenantsClientMockRecorder
}

// MockTenantsClientMockRecorder is the mock recorder for MockTenantsClient.
type MockTenantsClientMockRecorder struct {
	mock *MockTenantsClient
}

// NewMockTenantsClient creates a new mock instance.
func NewMockTenantsClient(ctrl *gomock.Controller) *MockTenantsClient {
	mock := &MockTenantsClient{ctrl: ctrl}
	mock.recorder = &MockTenantsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantsClient) EXPECT() *MockTenantsClientMockRecorder {
	return m.recorder
}

// ListComplete mocks base method.
func (m *MockTenantsClient) ListComplete(arg0 context.Context) (subscription.TenantListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", arg0)
	ret0, _ := ret[0].(subscription.TenantListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockTenantsClientMockRecorder) ListComplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockTenantsClient)(nil).ListComplete), arg0)
}
