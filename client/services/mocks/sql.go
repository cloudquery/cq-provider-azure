// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: SqlDatabaseClient,SQLDatabaseBlobAuditingPoliciesClient,SQLFirewallClient,SQLServerAdminClient,SqlServerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sql "github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v4.0/sql"
	gomock "github.com/golang/mock/gomock"
)

// MockSqlDatabaseClient is a mock of SqlDatabaseClient interface.
type MockSqlDatabaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockSqlDatabaseClientMockRecorder
}

// MockSqlDatabaseClientMockRecorder is the mock recorder for MockSqlDatabaseClient.
type MockSqlDatabaseClientMockRecorder struct {
	mock *MockSqlDatabaseClient
}

// NewMockSqlDatabaseClient creates a new mock instance.
func NewMockSqlDatabaseClient(ctrl *gomock.Controller) *MockSqlDatabaseClient {
	mock := &MockSqlDatabaseClient{ctrl: ctrl}
	mock.recorder = &MockSqlDatabaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlDatabaseClient) EXPECT() *MockSqlDatabaseClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSqlDatabaseClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.DatabaseListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.DatabaseListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSqlDatabaseClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSqlDatabaseClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSQLDatabaseBlobAuditingPoliciesClient is a mock of SQLDatabaseBlobAuditingPoliciesClient interface.
type MockSQLDatabaseBlobAuditingPoliciesClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLDatabaseBlobAuditingPoliciesClientMockRecorder
}

// MockSQLDatabaseBlobAuditingPoliciesClientMockRecorder is the mock recorder for MockSQLDatabaseBlobAuditingPoliciesClient.
type MockSQLDatabaseBlobAuditingPoliciesClientMockRecorder struct {
	mock *MockSQLDatabaseBlobAuditingPoliciesClient
}

// NewMockSQLDatabaseBlobAuditingPoliciesClient creates a new mock instance.
func NewMockSQLDatabaseBlobAuditingPoliciesClient(ctrl *gomock.Controller) *MockSQLDatabaseBlobAuditingPoliciesClient {
	mock := &MockSQLDatabaseBlobAuditingPoliciesClient{ctrl: ctrl}
	mock.recorder = &MockSQLDatabaseBlobAuditingPoliciesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLDatabaseBlobAuditingPoliciesClient) EXPECT() *MockSQLDatabaseBlobAuditingPoliciesClientMockRecorder {
	return m.recorder
}

// ListByDatabase mocks base method.
func (m *MockSQLDatabaseBlobAuditingPoliciesClient) ListByDatabase(arg0 context.Context, arg1, arg2, arg3 string) (sql.DatabaseBlobAuditingPolicyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDatabase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sql.DatabaseBlobAuditingPolicyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDatabase indicates an expected call of ListByDatabase.
func (mr *MockSQLDatabaseBlobAuditingPoliciesClientMockRecorder) ListByDatabase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDatabase", reflect.TypeOf((*MockSQLDatabaseBlobAuditingPoliciesClient)(nil).ListByDatabase), arg0, arg1, arg2, arg3)
}

// MockSQLFirewallClient is a mock of SQLFirewallClient interface.
type MockSQLFirewallClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLFirewallClientMockRecorder
}

// MockSQLFirewallClientMockRecorder is the mock recorder for MockSQLFirewallClient.
type MockSQLFirewallClientMockRecorder struct {
	mock *MockSQLFirewallClient
}

// NewMockSQLFirewallClient creates a new mock instance.
func NewMockSQLFirewallClient(ctrl *gomock.Controller) *MockSQLFirewallClient {
	mock := &MockSQLFirewallClient{ctrl: ctrl}
	mock.recorder = &MockSQLFirewallClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLFirewallClient) EXPECT() *MockSQLFirewallClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLFirewallClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.FirewallRuleListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.FirewallRuleListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLFirewallClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLFirewallClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSQLServerAdminClient is a mock of SQLServerAdminClient interface.
type MockSQLServerAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockSQLServerAdminClientMockRecorder
}

// MockSQLServerAdminClientMockRecorder is the mock recorder for MockSQLServerAdminClient.
type MockSQLServerAdminClientMockRecorder struct {
	mock *MockSQLServerAdminClient
}

// NewMockSQLServerAdminClient creates a new mock instance.
func NewMockSQLServerAdminClient(ctrl *gomock.Controller) *MockSQLServerAdminClient {
	mock := &MockSQLServerAdminClient{ctrl: ctrl}
	mock.recorder = &MockSQLServerAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLServerAdminClient) EXPECT() *MockSQLServerAdminClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSQLServerAdminClient) ListByServer(arg0 context.Context, arg1, arg2 string) (sql.AdministratorListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(sql.AdministratorListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSQLServerAdminClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSQLServerAdminClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockSqlServerClient is a mock of SqlServerClient interface.
type MockSqlServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSqlServerClientMockRecorder
}

// MockSqlServerClientMockRecorder is the mock recorder for MockSqlServerClient.
type MockSqlServerClientMockRecorder struct {
	mock *MockSqlServerClient
}

// NewMockSqlServerClient creates a new mock instance.
func NewMockSqlServerClient(ctrl *gomock.Controller) *MockSqlServerClient {
	mock := &MockSqlServerClient{ctrl: ctrl}
	mock.recorder = &MockSqlServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlServerClient) EXPECT() *MockSqlServerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSqlServerClient) List(arg0 context.Context) (sql.ServerListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(sql.ServerListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSqlServerClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSqlServerClient)(nil).List), arg0)
}
