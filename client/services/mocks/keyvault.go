// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: KeyClient,SecretsClient,VaultClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	keyvault "github.com/Azure/azure-sdk-for-go/services/keyvault/mgmt/2019-09-01/keyvault"
	keyvault0 "github.com/Azure/azure-sdk-for-go/services/keyvault/v7.1/keyvault"
	gomock "github.com/golang/mock/gomock"
)

// MockKeyClient is a mock of KeyClient interface.
type MockKeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyClientMockRecorder
}

// MockKeyClientMockRecorder is the mock recorder for MockKeyClient.
type MockKeyClientMockRecorder struct {
	mock *MockKeyClient
}

// NewMockKeyClient creates a new mock instance.
func NewMockKeyClient(ctrl *gomock.Controller) *MockKeyClient {
	mock := &MockKeyClient{ctrl: ctrl}
	mock.recorder = &MockKeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyClient) EXPECT() *MockKeyClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockKeyClient) List(arg0 context.Context, arg1, arg2 string) (keyvault.KeyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(keyvault.KeyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKeyClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeyClient)(nil).List), arg0, arg1, arg2)
}

// MockSecretsClient is a mock of SecretsClient interface.
type MockSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsClientMockRecorder
}

// MockSecretsClientMockRecorder is the mock recorder for MockSecretsClient.
type MockSecretsClientMockRecorder struct {
	mock *MockSecretsClient
}

// NewMockSecretsClient creates a new mock instance.
func NewMockSecretsClient(ctrl *gomock.Controller) *MockSecretsClient {
	mock := &MockSecretsClient{ctrl: ctrl}
	mock.recorder = &MockSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsClient) EXPECT() *MockSecretsClientMockRecorder {
	return m.recorder
}

// GetSecrets mocks base method.
func (m *MockSecretsClient) GetSecrets(arg0 context.Context, arg1 string, arg2 *int32) (keyvault0.SecretListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", arg0, arg1, arg2)
	ret0, _ := ret[0].(keyvault0.SecretListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockSecretsClientMockRecorder) GetSecrets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockSecretsClient)(nil).GetSecrets), arg0, arg1, arg2)
}

// MockVaultClient is a mock of VaultClient interface.
type MockVaultClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultClientMockRecorder
}

// MockVaultClientMockRecorder is the mock recorder for MockVaultClient.
type MockVaultClientMockRecorder struct {
	mock *MockVaultClient
}

// NewMockVaultClient creates a new mock instance.
func NewMockVaultClient(ctrl *gomock.Controller) *MockVaultClient {
	mock := &MockVaultClient{ctrl: ctrl}
	mock.recorder = &MockVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultClient) EXPECT() *MockVaultClientMockRecorder {
	return m.recorder
}

// ListBySubscription mocks base method.
func (m *MockVaultClient) ListBySubscription(arg0 context.Context, arg1 *int32) (keyvault.VaultListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0, arg1)
	ret0, _ := ret[0].(keyvault.VaultListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockVaultClientMockRecorder) ListBySubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockVaultClient)(nil).ListBySubscription), arg0, arg1)
}
