// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: DisksClient,GroupsClient,KeyClient,VaultClient,StorageAccountClient,StorageContainerClient,SqlServerClient,SqlDatabaseClient,MySQLServerClient,MySQLConfigurationClient,PostgresqlConfigurationClient,PostgresqlServerClient,VirtualNetworksClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2020-06-01/compute"
	keyvault "github.com/Azure/azure-sdk-for-go/services/keyvault/mgmt/2019-09-01/keyvault"
	mysql "github.com/Azure/azure-sdk-for-go/services/mysql/mgmt/2020-01-01/mysql"
	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2020-08-01/network"
	postgresql "github.com/Azure/azure-sdk-for-go/services/postgresql/mgmt/2020-01-01/postgresql"
	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2020-10-01/resources"
	sql "github.com/Azure/azure-sdk-for-go/services/sql/mgmt/2014-04-01/sql"
	storage "github.com/Azure/azure-sdk-for-go/services/storage/mgmt/2021-01-01/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockDisksClient is a mock of DisksClient interface.
type MockDisksClient struct {
	ctrl     *gomock.Controller
	recorder *MockDisksClientMockRecorder
}

// MockDisksClientMockRecorder is the mock recorder for MockDisksClient.
type MockDisksClientMockRecorder struct {
	mock *MockDisksClient
}

// NewMockDisksClient creates a new mock instance.
func NewMockDisksClient(ctrl *gomock.Controller) *MockDisksClient {
	mock := &MockDisksClient{ctrl: ctrl}
	mock.recorder = &MockDisksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisksClient) EXPECT() *MockDisksClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockDisksClient) List(arg0 context.Context) (compute.DiskListPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(compute.DiskListPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDisksClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDisksClient)(nil).List), arg0)
}

// MockGroupsClient is a mock of GroupsClient interface.
type MockGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsClientMockRecorder
}

// MockGroupsClientMockRecorder is the mock recorder for MockGroupsClient.
type MockGroupsClientMockRecorder struct {
	mock *MockGroupsClient
}

// NewMockGroupsClient creates a new mock instance.
func NewMockGroupsClient(ctrl *gomock.Controller) *MockGroupsClient {
	mock := &MockGroupsClient{ctrl: ctrl}
	mock.recorder = &MockGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupsClient) EXPECT() *MockGroupsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockGroupsClient) List(arg0 context.Context, arg1 string, arg2 *int32) (resources.GroupListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.GroupListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGroupsClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGroupsClient)(nil).List), arg0, arg1, arg2)
}

// MockKeyClient is a mock of KeyClient interface.
type MockKeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyClientMockRecorder
}

// MockKeyClientMockRecorder is the mock recorder for MockKeyClient.
type MockKeyClientMockRecorder struct {
	mock *MockKeyClient
}

// NewMockKeyClient creates a new mock instance.
func NewMockKeyClient(ctrl *gomock.Controller) *MockKeyClient {
	mock := &MockKeyClient{ctrl: ctrl}
	mock.recorder = &MockKeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyClient) EXPECT() *MockKeyClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockKeyClient) List(arg0 context.Context, arg1, arg2 string) (keyvault.KeyListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(keyvault.KeyListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKeyClientMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeyClient)(nil).List), arg0, arg1, arg2)
}

// MockVaultClient is a mock of VaultClient interface.
type MockVaultClient struct {
	ctrl     *gomock.Controller
	recorder *MockVaultClientMockRecorder
}

// MockVaultClientMockRecorder is the mock recorder for MockVaultClient.
type MockVaultClientMockRecorder struct {
	mock *MockVaultClient
}

// NewMockVaultClient creates a new mock instance.
func NewMockVaultClient(ctrl *gomock.Controller) *MockVaultClient {
	mock := &MockVaultClient{ctrl: ctrl}
	mock.recorder = &MockVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultClient) EXPECT() *MockVaultClientMockRecorder {
	return m.recorder
}

// ListBySubscription mocks base method.
func (m *MockVaultClient) ListBySubscription(arg0 context.Context, arg1 *int32) (keyvault.VaultListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubscription", arg0, arg1)
	ret0, _ := ret[0].(keyvault.VaultListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySubscription indicates an expected call of ListBySubscription.
func (mr *MockVaultClientMockRecorder) ListBySubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubscription", reflect.TypeOf((*MockVaultClient)(nil).ListBySubscription), arg0, arg1)
}

// MockStorageAccountClient is a mock of StorageAccountClient interface.
type MockStorageAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAccountClientMockRecorder
}

// MockStorageAccountClientMockRecorder is the mock recorder for MockStorageAccountClient.
type MockStorageAccountClientMockRecorder struct {
	mock *MockStorageAccountClient
}

// NewMockStorageAccountClient creates a new mock instance.
func NewMockStorageAccountClient(ctrl *gomock.Controller) *MockStorageAccountClient {
	mock := &MockStorageAccountClient{ctrl: ctrl}
	mock.recorder = &MockStorageAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAccountClient) EXPECT() *MockStorageAccountClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockStorageAccountClient) List(arg0 context.Context) (storage.AccountListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(storage.AccountListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageAccountClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageAccountClient)(nil).List), arg0)
}

// MockStorageContainerClient is a mock of StorageContainerClient interface.
type MockStorageContainerClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageContainerClientMockRecorder
}

// MockStorageContainerClientMockRecorder is the mock recorder for MockStorageContainerClient.
type MockStorageContainerClientMockRecorder struct {
	mock *MockStorageContainerClient
}

// NewMockStorageContainerClient creates a new mock instance.
func NewMockStorageContainerClient(ctrl *gomock.Controller) *MockStorageContainerClient {
	mock := &MockStorageContainerClient{ctrl: ctrl}
	mock.recorder = &MockStorageContainerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageContainerClient) EXPECT() *MockStorageContainerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockStorageContainerClient) List(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 storage.ListContainersInclude) (storage.ListContainerItemsPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(storage.ListContainerItemsPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageContainerClientMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageContainerClient)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockSqlServerClient is a mock of SqlServerClient interface.
type MockSqlServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSqlServerClientMockRecorder
}

// MockSqlServerClientMockRecorder is the mock recorder for MockSqlServerClient.
type MockSqlServerClientMockRecorder struct {
	mock *MockSqlServerClient
}

// NewMockSqlServerClient creates a new mock instance.
func NewMockSqlServerClient(ctrl *gomock.Controller) *MockSqlServerClient {
	mock := &MockSqlServerClient{ctrl: ctrl}
	mock.recorder = &MockSqlServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlServerClient) EXPECT() *MockSqlServerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSqlServerClient) List(arg0 context.Context) (sql.ServerListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(sql.ServerListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSqlServerClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSqlServerClient)(nil).List), arg0)
}

// MockSqlDatabaseClient is a mock of SqlDatabaseClient interface.
type MockSqlDatabaseClient struct {
	ctrl     *gomock.Controller
	recorder *MockSqlDatabaseClientMockRecorder
}

// MockSqlDatabaseClientMockRecorder is the mock recorder for MockSqlDatabaseClient.
type MockSqlDatabaseClientMockRecorder struct {
	mock *MockSqlDatabaseClient
}

// NewMockSqlDatabaseClient creates a new mock instance.
func NewMockSqlDatabaseClient(ctrl *gomock.Controller) *MockSqlDatabaseClient {
	mock := &MockSqlDatabaseClient{ctrl: ctrl}
	mock.recorder = &MockSqlDatabaseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlDatabaseClient) EXPECT() *MockSqlDatabaseClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockSqlDatabaseClient) ListByServer(arg0 context.Context, arg1, arg2, arg3, arg4 string) (sql.DatabaseListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(sql.DatabaseListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockSqlDatabaseClientMockRecorder) ListByServer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockSqlDatabaseClient)(nil).ListByServer), arg0, arg1, arg2, arg3, arg4)
}

// MockMySQLServerClient is a mock of MySQLServerClient interface.
type MockMySQLServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLServerClientMockRecorder
}

// MockMySQLServerClientMockRecorder is the mock recorder for MockMySQLServerClient.
type MockMySQLServerClientMockRecorder struct {
	mock *MockMySQLServerClient
}

// NewMockMySQLServerClient creates a new mock instance.
func NewMockMySQLServerClient(ctrl *gomock.Controller) *MockMySQLServerClient {
	mock := &MockMySQLServerClient{ctrl: ctrl}
	mock.recorder = &MockMySQLServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMySQLServerClient) EXPECT() *MockMySQLServerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMySQLServerClient) List(arg0 context.Context) (mysql.ServerListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(mysql.ServerListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMySQLServerClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMySQLServerClient)(nil).List), arg0)
}

// MockMySQLConfigurationClient is a mock of MySQLConfigurationClient interface.
type MockMySQLConfigurationClient struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLConfigurationClientMockRecorder
}

// MockMySQLConfigurationClientMockRecorder is the mock recorder for MockMySQLConfigurationClient.
type MockMySQLConfigurationClientMockRecorder struct {
	mock *MockMySQLConfigurationClient
}

// NewMockMySQLConfigurationClient creates a new mock instance.
func NewMockMySQLConfigurationClient(ctrl *gomock.Controller) *MockMySQLConfigurationClient {
	mock := &MockMySQLConfigurationClient{ctrl: ctrl}
	mock.recorder = &MockMySQLConfigurationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMySQLConfigurationClient) EXPECT() *MockMySQLConfigurationClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockMySQLConfigurationClient) ListByServer(arg0 context.Context, arg1, arg2 string) (mysql.ConfigurationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(mysql.ConfigurationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockMySQLConfigurationClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockMySQLConfigurationClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockPostgresqlConfigurationClient is a mock of PostgresqlConfigurationClient interface.
type MockPostgresqlConfigurationClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlConfigurationClientMockRecorder
}

// MockPostgresqlConfigurationClientMockRecorder is the mock recorder for MockPostgresqlConfigurationClient.
type MockPostgresqlConfigurationClientMockRecorder struct {
	mock *MockPostgresqlConfigurationClient
}

// NewMockPostgresqlConfigurationClient creates a new mock instance.
func NewMockPostgresqlConfigurationClient(ctrl *gomock.Controller) *MockPostgresqlConfigurationClient {
	mock := &MockPostgresqlConfigurationClient{ctrl: ctrl}
	mock.recorder = &MockPostgresqlConfigurationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlConfigurationClient) EXPECT() *MockPostgresqlConfigurationClientMockRecorder {
	return m.recorder
}

// ListByServer mocks base method.
func (m *MockPostgresqlConfigurationClient) ListByServer(arg0 context.Context, arg1, arg2 string) (postgresql.ConfigurationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(postgresql.ConfigurationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByServer indicates an expected call of ListByServer.
func (mr *MockPostgresqlConfigurationClientMockRecorder) ListByServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByServer", reflect.TypeOf((*MockPostgresqlConfigurationClient)(nil).ListByServer), arg0, arg1, arg2)
}

// MockPostgresqlServerClient is a mock of PostgresqlServerClient interface.
type MockPostgresqlServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlServerClientMockRecorder
}

// MockPostgresqlServerClientMockRecorder is the mock recorder for MockPostgresqlServerClient.
type MockPostgresqlServerClientMockRecorder struct {
	mock *MockPostgresqlServerClient
}

// NewMockPostgresqlServerClient creates a new mock instance.
func NewMockPostgresqlServerClient(ctrl *gomock.Controller) *MockPostgresqlServerClient {
	mock := &MockPostgresqlServerClient{ctrl: ctrl}
	mock.recorder = &MockPostgresqlServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlServerClient) EXPECT() *MockPostgresqlServerClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPostgresqlServerClient) List(arg0 context.Context) (postgresql.ServerListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(postgresql.ServerListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPostgresqlServerClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPostgresqlServerClient)(nil).List), arg0)
}

// MockVirtualNetworksClient is a mock of VirtualNetworksClient interface.
type MockVirtualNetworksClient struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworksClientMockRecorder
}

// MockVirtualNetworksClientMockRecorder is the mock recorder for MockVirtualNetworksClient.
type MockVirtualNetworksClientMockRecorder struct {
	mock *MockVirtualNetworksClient
}

// NewMockVirtualNetworksClient creates a new mock instance.
func NewMockVirtualNetworksClient(ctrl *gomock.Controller) *MockVirtualNetworksClient {
	mock := &MockVirtualNetworksClient{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualNetworksClient) EXPECT() *MockVirtualNetworksClientMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockVirtualNetworksClient) ListAll(arg0 context.Context) (network.VirtualNetworkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].(network.VirtualNetworkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockVirtualNetworksClientMockRecorder) ListAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualNetworksClient)(nil).ListAll), arg0)
}
