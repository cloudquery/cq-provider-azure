// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cq-provider-azure/client/services (interfaces: SubscriptionGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	subscription "github.com/Azure/azure-sdk-for-go/services/subscription/mgmt/2020-09-01/subscription"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionGetter is a mock of SubscriptionGetter interface.
type MockSubscriptionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionGetterMockRecorder
}

// MockSubscriptionGetterMockRecorder is the mock recorder for MockSubscriptionGetter.
type MockSubscriptionGetterMockRecorder struct {
	mock *MockSubscriptionGetter
}

// NewMockSubscriptionGetter creates a new mock instance.
func NewMockSubscriptionGetter(ctrl *gomock.Controller) *MockSubscriptionGetter {
	mock := &MockSubscriptionGetter{ctrl: ctrl}
	mock.recorder = &MockSubscriptionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionGetter) EXPECT() *MockSubscriptionGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSubscriptionGetter) Get(arg0 context.Context, arg1 string) (subscription.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(subscription.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubscriptionGetterMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubscriptionGetter)(nil).Get), arg0, arg1)
}
